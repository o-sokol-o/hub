// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/AquaEngineering/AquaHub/internal/domain"
	reflect "reflect"
)

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockAuthorization) CreateUser(user domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}



// GetUserFromToken mocks base method
func (m *MockAuthorization) GetUserFromToken(u_token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromToken", u_token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromToken indicates an expected call of GetUserFromToken
func (mr *MockAuthorizationMockRecorder) GetUserFromToken(u_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromToken", reflect.TypeOf((*MockAuthorization)(nil).GetUserFromToken), u_token)
}

// MockChecklistList is a mock of ChecklistList interface
type MockChecklistList struct {
	ctrl     *gomock.Controller
	recorder *MockChecklistListMockRecorder
}

// MockChecklistListMockRecorder is the mock recorder for MockChecklistList
type MockChecklistListMockRecorder struct {
	mock *MockChecklistList
}

// NewMockChecklistList creates a new mock instance
func NewMockChecklistList(ctrl *gomock.Controller) *MockChecklistList {
	mock := &MockChecklistList{ctrl: ctrl}
	mock.recorder = &MockChecklistListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChecklistList) EXPECT() *MockChecklistListMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockChecklistList) Create(userId int, list domain.Checklist) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockChecklistListMockRecorder) Create(userId, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChecklistList)(nil).Create), userId, list)
}

// GetAll mocks base method
func (m *MockChecklistList) GetAll(userId int) ([]domain.Checklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]domain.Checklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockChecklistListMockRecorder) GetAll(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockChecklistList)(nil).GetAll), userId)
}

// GetById mocks base method
func (m *MockChecklistList) GetById(userId, listId int) (domain.Checklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, listId)
	ret0, _ := ret[0].(domain.Checklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockChecklistListMockRecorder) GetById(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockChecklistList)(nil).GetById), userId, listId)
}

// Delete mocks base method
func (m *MockChecklistList) Delete(userId, listId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, listId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChecklistListMockRecorder) Delete(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChecklistList)(nil).Delete), userId, listId)
}

// Update mocks base method
func (m *MockChecklistList) Update(userId, listId int, input domain.Checklist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, listId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockChecklistListMockRecorder) Update(userId, listId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChecklistList)(nil).Update), userId, listId, input)
}

// MockChecklistItem is a mock of ChecklistItem interface
type MockChecklistItem struct {
	ctrl     *gomock.Controller
	recorder *MockChecklistItemMockRecorder
}

// MockChecklistItemMockRecorder is the mock recorder for MockChecklistItem
type MockChecklistItemMockRecorder struct {
	mock *MockChecklistItem
}

// NewMockChecklistItem creates a new mock instance
func NewMockChecklistItem(ctrl *gomock.Controller) *MockChecklistItem {
	mock := &MockChecklistItem{ctrl: ctrl}
	mock.recorder = &MockChecklistItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChecklistItem) EXPECT() *MockChecklistItemMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockChecklistItem) Create(userId, listId int, item domain.ChecklistItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, listId, item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockChecklistItemMockRecorder) Create(userId, listId, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChecklistItem)(nil).Create), userId, listId, item)
}

// GetAll mocks base method
func (m *MockChecklistItem) GetAll(userId, listId int) ([]domain.ChecklistItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, listId)
	ret0, _ := ret[0].([]domain.ChecklistItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockChecklistItemMockRecorder) GetAll(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockChecklistItem)(nil).GetAll), userId, listId)
}

// GetById mocks base method
func (m *MockChecklistItem) GetById(userId, itemId int) (domain.ChecklistItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, itemId)
	ret0, _ := ret[0].(domain.ChecklistItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockChecklistItemMockRecorder) GetById(userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockChecklistItem)(nil).GetById), userId, itemId)
}

// Delete mocks base method
func (m *MockChecklistItem) Delete(userId, itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChecklistItemMockRecorder) Delete(userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChecklistItem)(nil).Delete), userId, itemId)
}

// Update mocks base method
func (m *MockChecklistItem) Update(userId, itemId int, input domain.UpdateChecklistItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, itemId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockChecklistItemMockRecorder) Update(userId, itemId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChecklistItem)(nil).Update), userId, itemId, input)
}
