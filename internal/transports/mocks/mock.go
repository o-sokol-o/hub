// Code generated by MockGen. DO NOT EDIT.
// Source: iservices.go

// Package mock_handler_api is a generated GoMock package.
package mock_handler_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/o-sokol-o/hub/internal/domain"
)

// MockIServiceAuthentications is a mock of IServiceAuthentications interface.
type MockIServiceAuthentications struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceAuthenticationsMockRecorder
}

// MockIServiceAuthenticationsMockRecorder is the mock recorder for MockIServiceAuthentications.
type MockIServiceAuthenticationsMockRecorder struct {
	mock *MockIServiceAuthentications
}

// NewMockIServiceAuthentications creates a new mock instance.
func NewMockIServiceAuthentications(ctrl *gomock.Controller) *MockIServiceAuthentications {
	mock := &MockIServiceAuthentications{ctrl: ctrl}
	mock.recorder = &MockIServiceAuthenticationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceAuthentications) EXPECT() *MockIServiceAuthenticationsMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockIServiceAuthentications) Authenticate(email, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", email, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockIServiceAuthenticationsMockRecorder) Authenticate(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockIServiceAuthentications)(nil).Authenticate), email, password)
}

// CreateUser mocks base method.
func (m *MockIServiceAuthentications) CreateUser(user domain.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIServiceAuthenticationsMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIServiceAuthentications)(nil).CreateUser), user)
}

// GetAquahubIdfromTokens mocks base method.
func (m *MockIServiceAuthentications) GetAquahubIdfromTokens(h_token, u_token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAquahubIdfromTokens", h_token, u_token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAquahubIdfromTokens indicates an expected call of GetAquahubIdfromTokens.
func (mr *MockIServiceAuthenticationsMockRecorder) GetAquahubIdfromTokens(h_token, u_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAquahubIdfromTokens", reflect.TypeOf((*MockIServiceAuthentications)(nil).GetAquahubIdfromTokens), h_token, u_token)
}

// GetUserHWfromTokens mocks base method.
func (m *MockIServiceAuthentications) GetUserHWfromTokens(h_token, u_token string) ([]domain.SensorDataSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHWfromTokens", h_token, u_token)
	ret0, _ := ret[0].([]domain.SensorDataSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHWfromTokens indicates an expected call of GetUserHWfromTokens.
func (mr *MockIServiceAuthenticationsMockRecorder) GetUserHWfromTokens(h_token, u_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHWfromTokens", reflect.TypeOf((*MockIServiceAuthentications)(nil).GetUserHWfromTokens), h_token, u_token)
}

// MockIServiceChecklist is a mock of IServiceChecklist interface.
type MockIServiceChecklist struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceChecklistMockRecorder
}

// MockIServiceChecklistMockRecorder is the mock recorder for MockIServiceChecklist.
type MockIServiceChecklistMockRecorder struct {
	mock *MockIServiceChecklist
}

// NewMockIServiceChecklist creates a new mock instance.
func NewMockIServiceChecklist(ctrl *gomock.Controller) *MockIServiceChecklist {
	mock := &MockIServiceChecklist{ctrl: ctrl}
	mock.recorder = &MockIServiceChecklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceChecklist) EXPECT() *MockIServiceChecklistMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIServiceChecklist) Create(userId int, list domain.CreateChecklist) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, list)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIServiceChecklistMockRecorder) Create(userId, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIServiceChecklist)(nil).Create), userId, list)
}

// Delete mocks base method.
func (m *MockIServiceChecklist) Delete(userId, listId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, listId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIServiceChecklistMockRecorder) Delete(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIServiceChecklist)(nil).Delete), userId, listId)
}

// GetAllChecklistOfUser mocks base method.
func (m *MockIServiceChecklist) GetAllChecklistOfUser(userId int) ([]domain.Checklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChecklistOfUser", userId)
	ret0, _ := ret[0].([]domain.Checklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChecklistOfUser indicates an expected call of GetAllChecklistOfUser.
func (mr *MockIServiceChecklistMockRecorder) GetAllChecklistOfUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChecklistOfUser", reflect.TypeOf((*MockIServiceChecklist)(nil).GetAllChecklistOfUser), userId)
}

// GetById mocks base method.
func (m *MockIServiceChecklist) GetById(userId, listId int) (*domain.Checklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, listId)
	ret0, _ := ret[0].(*domain.Checklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIServiceChecklistMockRecorder) GetById(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIServiceChecklist)(nil).GetById), userId, listId)
}

// Update mocks base method.
func (m *MockIServiceChecklist) Update(userId int, input domain.UpdateChecklist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIServiceChecklistMockRecorder) Update(userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIServiceChecklist)(nil).Update), userId, input)
}

// MockIServiceChecklistItem is a mock of IServiceChecklistItem interface.
type MockIServiceChecklistItem struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceChecklistItemMockRecorder
}

// MockIServiceChecklistItemMockRecorder is the mock recorder for MockIServiceChecklistItem.
type MockIServiceChecklistItemMockRecorder struct {
	mock *MockIServiceChecklistItem
}

// NewMockIServiceChecklistItem creates a new mock instance.
func NewMockIServiceChecklistItem(ctrl *gomock.Controller) *MockIServiceChecklistItem {
	mock := &MockIServiceChecklistItem{ctrl: ctrl}
	mock.recorder = &MockIServiceChecklistItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceChecklistItem) EXPECT() *MockIServiceChecklistItemMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIServiceChecklistItem) Create(userId, listId int, item domain.ChecklistItem) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, listId, item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIServiceChecklistItemMockRecorder) Create(userId, listId, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIServiceChecklistItem)(nil).Create), userId, listId, item)
}

// Delete mocks base method.
func (m *MockIServiceChecklistItem) Delete(userId, listId, itemId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, listId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIServiceChecklistItemMockRecorder) Delete(userId, listId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIServiceChecklistItem)(nil).Delete), userId, listId, itemId)
}

// GetAll mocks base method.
func (m *MockIServiceChecklistItem) GetAll(userId, listId int) ([]domain.ChecklistItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, listId)
	ret0, _ := ret[0].([]domain.ChecklistItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIServiceChecklistItemMockRecorder) GetAll(userId, listId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIServiceChecklistItem)(nil).GetAll), userId, listId)
}

// GetById mocks base method.
func (m *MockIServiceChecklistItem) GetById(userId, listId, itemId int) (domain.ChecklistItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, listId, itemId)
	ret0, _ := ret[0].(domain.ChecklistItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIServiceChecklistItemMockRecorder) GetById(userId, listId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIServiceChecklistItem)(nil).GetById), userId, listId, itemId)
}

// Update mocks base method.
func (m *MockIServiceChecklistItem) Update(userId, listId, itemId int, input domain.UpdateChecklistItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, listId, itemId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIServiceChecklistItemMockRecorder) Update(userId, listId, itemId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIServiceChecklistItem)(nil).Update), userId, listId, itemId, input)
}

// MockIServiceAquahubList is a mock of IServiceAquahubList interface.
type MockIServiceAquahubList struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceAquahubListMockRecorder
}

// MockIServiceAquahubListMockRecorder is the mock recorder for MockIServiceAquahubList.
type MockIServiceAquahubListMockRecorder struct {
	mock *MockIServiceAquahubList
}

// NewMockIServiceAquahubList creates a new mock instance.
func NewMockIServiceAquahubList(ctrl *gomock.Controller) *MockIServiceAquahubList {
	mock := &MockIServiceAquahubList{ctrl: ctrl}
	mock.recorder = &MockIServiceAquahubListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceAquahubList) EXPECT() *MockIServiceAquahubListMockRecorder {
	return m.recorder
}

// AppendDataOfSensor mocks base method.
func (m *MockIServiceAquahubList) AppendDataOfSensor(list []domain.SensorDataSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendDataOfSensor", list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendDataOfSensor indicates an expected call of AppendDataOfSensor.
func (mr *MockIServiceAquahubListMockRecorder) AppendDataOfSensor(list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendDataOfSensor", reflect.TypeOf((*MockIServiceAquahubList)(nil).AppendDataOfSensor), list)
}

// DeviceCreateOrUpdate mocks base method.
func (m *MockIServiceAquahubList) DeviceCreateOrUpdate(aquahub_id, device_local_id int, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceCreateOrUpdate", aquahub_id, device_local_id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeviceCreateOrUpdate indicates an expected call of DeviceCreateOrUpdate.
func (mr *MockIServiceAquahubListMockRecorder) DeviceCreateOrUpdate(aquahub_id, device_local_id, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCreateOrUpdate", reflect.TypeOf((*MockIServiceAquahubList)(nil).DeviceCreateOrUpdate), aquahub_id, device_local_id, value)
}

// SensorCreateOrUpdate mocks base method.
func (m *MockIServiceAquahubList) SensorCreateOrUpdate(aquahub_id, device_local_id, sensor_local_id int, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SensorCreateOrUpdate", aquahub_id, device_local_id, sensor_local_id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SensorCreateOrUpdate indicates an expected call of SensorCreateOrUpdate.
func (mr *MockIServiceAquahubListMockRecorder) SensorCreateOrUpdate(aquahub_id, device_local_id, sensor_local_id, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SensorCreateOrUpdate", reflect.TypeOf((*MockIServiceAquahubList)(nil).SensorCreateOrUpdate), aquahub_id, device_local_id, sensor_local_id, value)
}
